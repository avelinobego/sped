{
    // Place your sped workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "XML e validar": {
        "scope": "go",
        "prefix": "completar",
        "body": [
            "type $TM_SELECTED_TEXT $0",
            "",
            "func (ele $TM_SELECTED_TEXT) Validar() error {",
            "return nil",
            "}",
            "",
            "func (ele $TM_SELECTED_TEXT) String() string {",
            "    return \"\"",
            "}",
            "",
            "func (ele $TM_SELECTED_TEXT) MarshalXML(e *xml.Encoder, start xml.StartElement) error {",
            "   err :=ele.Validar()",
            "   if err!= nil {",
            "       return err",
            "   }",
            "   err = e.EncodeElement(ele, start)",
            "   if err != nil {",
            "       return err",
            "   }",
            "",
            "   return nil",
            "}",
            "",
            "func (ele *$TM_SELECTED_TEXT) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {",
 	        "   var conteudo string",
	        "   if err := d.DecodeElement(&conteudo, &start); err != nil {",
		    "       return err",
            "   }",
            "",
            "   //TODO: Implementar",
            "",
            "   err :=ele.Validar()",
            "   if err!= nil {",
            "       return err",
            "   }",
            "",
            "   return nil",
            "}",
            "",
        ]
    }
}